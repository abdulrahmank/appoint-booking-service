<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

        <style>
            .available {background-color: green;}
            .booked {background-color: red;}
            .appointment-block{
                margin: 5px;
                padding-bottom: 5px;
            }
            .start-time:before{
                content: "Start time: ";
                font-weight: bold;
            }
            .end-time:before{
                content: "End time: ";
                font-weight: bold;
            }
            a.available {
                visibility: hidden;
            }
            a.booked {
                visibility: hidden;
            }
            body {
                padding-top: 10px;
            }
        </style>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
        <script src="https://www.gstatic.com/firebasejs/4.13.0/firebase-app.js"></script>
        <script src="https://www.gstatic.com/firebasejs/4.13.0/firebase-messaging.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.4.0/bootbox.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
        <script>
            firebase.initializeApp({
                'messagingSenderId': '<%= process.env.FCM_SERNDER_ID %>'
            })
            const messaging = firebase.messaging();
            function initFirebaseMessagingRegistration() {
                messaging
                    .requestPermission()
                    .then(function () {
                        console.log("Got notification permission");
                        return messaging.getToken();
                    })
                    .then(function(token) {
                        const userId = readCookie('userId');
                        $.post(`/api/v1/users/${userId}/access_token`, {
                            accessToken: token,
                        },function(xhr, result) {
                            if (result == 'success') {
                                console.log('FCM Token updated successfully!')
                            } else {
                                console.log('FCM Token updation failed!')
                            }
                        });
                    })
                    .catch(function (err) {
                        console.log("Didn't get notification permission", err);
                    });
            }
            messaging.onMessage(function (payload) {
                console.log("Message received. ", JSON.stringify(payload));
                $.get(`/api/v1/requests/${payload.data.bookingRequestId}`, function(bookingReqData, status){
                    const appointmentDate = bookingReqData.bookingRequest.date;
                    if(!$($.find('#'+bookingReqData.slot._id)).hasClass('available')) {
                        return;
                    }
                    bootbox.dialog({ 
                        title: 'Appointment booking request',
                        message: `<p>User ${bookingReqData.user.name} has requested for slot starting with ${bookingReqData.slot.startTime}` +
                                 ` and ending with ${bookingReqData.slot.endTime} on date(dd-mm-yyyy):`+
                                 ` ${appointmentDate.getDate()+"-"+appointmentDate.getMonth()+"-"+appointmentDate.getYear()}</p>` ,
                        size: 'large',
                        buttons: {
                            Accept: {
                                label: 'Accept',
                                className: 'btn-info',
                                callback: function() {
                                    $.ajax({
                                        type: 'PUT',
                                        data: JSON.stringify({status: 'accepted'}),
                                        contentType: 'application/json',
                                        url: `/api/v1/requests/${bookingReqData.bookingRequest.id}`,
                                        success: function(data) {
                                            console.log('success');
                                            console.log(JSON.stringify(data));
                                            location.reload();
                                        }
                                    });
                                }
                            },
                            Reject: {
                                label: 'Reject',
                                className: 'btn-info',
                                callback: function() {
                                    $.ajax({
                                        type: 'PUT',
                                        data: JSON.stringify({status: 'rejected'}),
                                        contentType: 'application/json',
                                        url: `/api/v1/requests/${bookingReqData.bookingRequest.id}`,
                                        success: function(data) {
                                            console.log('success');
                                            console.log(JSON.stringify(data));
                                        }
                                    });
                                }
                            }
                        }
                    });
                });
                return;
            });
            messaging.onTokenRefresh(function () {
                messaging.getToken()
                    .then(function (refreshedToken) {
                        console.log('Token refreshed.');
                    }).catch(function (err) {
                        console.log('Unable to retrieve refreshed token ', err);
                    });
            });
            $(document).ready(function() {
                initFirebaseMessagingRegistration();
            });
            $(function() {
                $('.make-available').click(function(event) {
                    var target = $(event.target);
                    if (!target.hasClass('appointment-block')) {
                        target = $(target.parent('.appointment-block'));
                    }
                    if (target.hasClass('available')) {
                        alert('Slot already made available for booking!');
                        return
                    }
                    const startTime = $(target.children().children('.start-time').first()).text();
                    const endTime = $(target.children().children('.end-time').first()).text();
                    $.post("/api/v1/providers/<%=provider.id%>/slots", {startTime, endTime}, function(xhr, result) {
                        if (result == 'success') {
                            target.removeClass('un_available').addClass('available');
                            target.children('.make-available').removeClass('un_available').addClass('available');
                        }
                    });
                });
            })
            function readCookie(name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
                }
                return null;
            }
        </script>
        <title>Book an appointment</title>
    </head>
    <body>
        <div class="container card">
            <div class="card-body text-center">
                <div > <b> Name: </b> <%= provider.name %> </div>
                <div > <b> Services: </b> <%= provider.services.join(', ') %> </div>
                <div > <b> Location: </b> <%= provider.location %> </div>
            </div>
        </div>
        <div class="container">
            <% for (var i = 0; i < slots.length; i = i + 4) {%>
                <div class='row'>
                    <% for (var j = 0; j < 4; j++) {%>
                    <div id='<%= slots[i + j]._id %>' class='appointment-block <%= slots[i + j].status %> col-sm card' >
                        <div class='card-body'>
                            <div class='start-time card-text'><%= slots[i + j].startTime %></div>
                            <div class='end-time card-text'><%= slots[i + j].endTime %></div>
                        </div>
                        <a class='btn btn-primary make-available <%= slots[i + j].status %>'>Make available</a>
                    </div>
                    <% } %>
                </div>
            <% } %>
        </div>
    </body>
</html>